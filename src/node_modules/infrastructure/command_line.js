// Copyright Titanium I.T. LLC.
import * as ensure from "util/ensure.js";
import { OutputListener } from "util/output_listener.js";

/** Command-line I/O (process arguments, stdout, and stderr). */
export class CommandLine {

	/**
	 * Factory method. Wraps the current process arguments, stdout, and stderr.
	 * @returns {CommandLine} the wrapped process
	 */
	static create() {
		ensure.signature(arguments, []);
		return new CommandLine(process);
	}

	/**
	 * Factory method. Simulates process arguments and discards writes to stdout and stderr.
	 * @param [args] simulated process arguments
	 * @returns {CommandLine} the simulated process
	 */
	static createNull({ args = [] } = {}) {
		ensure.signature(arguments, [ [ undefined, { args: Array } ] ]);
		return new CommandLine(new StubbedProcess(args));
	}

	/** Only for use by tests. (Use a factory method instead.) */
	constructor(proc) {
		this._process = proc;
		this._stdoutListener = new OutputListener();
		this._stderrListener = new OutputListener();
	}

	/**
	 * @returns {string[]} arguments to the current process, not including 'node' or the name of the script
	 */
	args() {
		ensure.signature(arguments, []);
		return this._process.argv.slice(2);
	}

	/**
	 * Write to stdout.
	 * @param text the text to write
	 */
	writeStdout(text) {
		ensure.signature(arguments, [ String ]);
		this._process.stdout.write(text);
		this._stdoutListener.emit(text);
	}

	/**
	 * Write to stderr.
	 * @param text the text to write
	 */
	writeStderr(text) {
		ensure.signature(arguments, [ String ]);
		this._process.stderr.write(text);
		this._stderrListener.emit(text);
	}

	/**
	 * Track writes to stdout.
	 * @returns {OutputTracker} the output tracker
	 */
	trackStdout() {
		return this._stdoutListener.trackOutput();
	}

	/**
	 * Track writes to stderr.
	 * @returns {OutputTracker} the output tracker
	 */
	trackStderr() {
		return this._stderrListener.trackOutput();
	}

}


class StubbedProcess {

	constructor(args) {
		this._args = args;
	}

	get argv() {
		return [ "stubbed_process_node", "stubbed_process_script.js", ...this._args ];
	}

	get stdout() {
		return {
			write() {},
		};
	}

	get stderr() {
		return {
			write() {},
		};
	}

}