// Copyright Titanium I.T. LLC.
"use strict";

const assert = require("util/assert");
const Clock = require("./clock");

describe("Clock", () => {


	describe("waiting", () => {

		it("waits N milliseconds", async () => {
			const clock = Clock.create();

			const start = clock.now();
			await clock.waitAsync(10);
			const elapsedTime = clock.now() - start;
			assert.isAtLeast(elapsedTime, 9);
		});

	});


	describe("current time", () => {

		it("provides current timestamp", () => {
			const clock = Clock.create();

			let expected = Date.now();
			const actual = clock.now();
			if (actual !== expected) expected = Date.now();
			assert.equal(actual, expected);
		});

		it("outputs current time using computer's language and time zone", () => {
			const format = {
				dateStyle: "medium",
				timeStyle: "short",
				timeZone: "local",
			};
			const formatCopy = { ...format };
			const jsFormat = {
				dateStyle: "medium",
				timeStyle: "short",
			};

			checkToFormattedString(format, jsFormat, "local", undefined);
			assert.deepEqual(format, formatCopy, "should not modify original format object");
		});

		it("outputs current time using configured time zone and locale", () => {
			const format = {
				timeZone: "Europe/Paris",
				dateStyle: "medium",
				timeStyle: "short",
			};
			const locale = "fr";
			checkToFormattedString(format, format, locale, locale);
		});

		it("fails fast if time zone isn't specified", () => {
			assert.throws(
				() => Clock.create().toFormattedString({}, "en-US"),
				"Must specify options.timeZone (use 'local' for computer's time zone)"
			);
		});

		it("fails fast if locale isn't specified", () => {
			assert.throws(
				() => Clock.create().toFormattedString({ timeZone: "UTC" }),
				"Must specify locale (use 'local' for computer's default locale)"
			);
		});

		function checkToFormattedString(ourFormat, jsFormat, ourLocale, jsLocale) {
			const clock = Clock.create();
			let expected = new Date().toLocaleString(jsLocale, jsFormat);
			const actual = clock.toFormattedString(ourFormat, ourLocale);
			if (expected !== actual) expected = new Date().toLocaleString(jsLocale, jsFormat);

			assert.equal(actual, expected);
		}

	});


	describe("timeouts", () => {

		function createTimeoutFn(result = "default timeout function result") {
			const timeoutFn = () => {
				timeoutFn.ran = true;
				if (result instanceof Error) return Promise.reject(result);
				else return Promise.resolve(result);
			};

			timeoutFn.ran = false;
			return timeoutFn;
		}

		it("resolves if promise resolves before timeout", async () => {
			const clock = Clock.createNull();
			const timeoutFnAsync = createTimeoutFn();
			const promise = Promise.resolve("result");

			const result = await clock.timeoutAsync(10000, promise, timeoutFnAsync);
			assert.equal(await result, "result", "should return result of promise");
			assert.equal(timeoutFnAsync.ran, false, "should not run timeout function");

			await clock.advanceNullTimersAsync();
			assert.equal(clock.now(), 0, "should resolve immediately");
		});

		it("rejects if promise rejects before timeout", async () => {
			const clock = Clock.createNull();
			const timeoutFnAsync = createTimeoutFn();
			const promise = Promise.reject(new Error("my error"));

			await assert.throwsAsync(
				() => clock.timeoutAsync(10000, promise, timeoutFnAsync),
				"my error",
				"should return result of promise"
			);
			assert.equal(timeoutFnAsync.ran, false, "should not run timeout function");

			await clock.advanceNullTimersAsync();
			assert.equal(clock.now(), 0, "should resolve immediately");
		});

		it("resolves via timeout function if promise times out", async () => {
			const clock = Clock.createNull();
			const timeoutFnAsync = createTimeoutFn("timeout result");

			const promise = new Promise(() => {});
			const timeoutPromise = clock.timeoutAsync(10000, promise, timeoutFnAsync);

			await clock.advanceNullTimersAsync();
			assert.equal(clock.now(), 10000, "should wait for timeout");
			assert.equal(timeoutFnAsync.ran, true, "should run timeout function");
			assert.equal(await timeoutPromise, "timeout result", "should return result of timeout function");
		});

		it("rejects via timeout function if promise times out and timeout rejects", async () => {
			const clock = Clock.createNull();
			const timeoutFnAsync = createTimeoutFn(new Error("my error"));

			const promise = new Promise(() => {});
			const timeoutPromise = clock.timeoutAsync(10000, promise, timeoutFnAsync);
			timeoutPromise.catch(() => {});   // prevent 'unhandled promise exception'

			await clock.advanceNullTimersAsync();
			assert.equal(clock.now(), 10000, "should wait for timeout");
			assert.equal(timeoutFnAsync.ran, true, "should run timeout function");
			await assert.throwsAsync(
				() => timeoutPromise,
				"my error",
				"should reject because timeout function rejected"
			);
		});

		it("ignores promise rejection after timeout", async () => {
			const clock = Clock.createNull();
			const timeoutFnAsync = createTimeoutFn("timeout result");
			const promise = (async () => {
				await clock.waitAsync(20000);
				throw new Error("this error should be ignored");
			})();

			const timeoutPromise = clock.timeoutAsync(10000, promise, timeoutFnAsync);
			await clock.advanceNullTimersAsync();
			assert.equal(await timeoutPromise, "timeout result");
		});

	});


	describe("nullability", () => {

		it("defaults 'now' to zero", () => {
			const clock = Clock.createNull();
			assert.equal(clock.now(), 0);
		});

		it("allows 'now' to be configured", () => {
			const clock = Clock.createNull({ now: 42 });
			assert.equal(clock.now(), 42);
		});

		it("renders to formatted string", () => {
			const clock = Clock.createNull({ now: 0 });

			const format = {
				timeZone: "Europe/Paris",
				dateStyle: "medium",
				timeStyle: "short",
			};
			assert.equal(clock.toFormattedString(format, "fr"), "1 janv. 1970, 01:00");
		});

		it("defaults time zone and locale to little-used values to prevent false successes", () => {
			const clock = Clock.createNull({ now: 0 });
			const format = { dateStyle: "medium", timeStyle: "long", timeZone: "local" };
			const formatCopy = { ...format };

			assert.equal(clock.toFormattedString(format, "local"), "1970 J-guer 1 10:00:00 GMT+10");
			assert.deepEqual(format, formatCopy, "should not modify original format object");
		});

		it("allows local time zone and locale to be configured", () => {
			const clock = Clock.createNull({ now: 0, timeZone: "America/New_York", locale: "uk" });
			const format = { dateStyle: "medium", timeStyle: "long", timeZone: "local" };
			assert.equal(clock.toFormattedString(format, "local"), "31 груд. 1969 р., 19:00:00 GMT-5");
		});

		it("can advance the clock", async () => {
			const clock = Clock.createNull();
			await clock.advanceNullAsync(10);
			assert.equal(clock.now(), 10);
		});

		it("can advance the clock until all timers expired", async () => {
			const clock = Clock.createNull();
			clock.waitAsync(999);
			await clock.advanceNullTimersAsync();
			assert.equal(clock.now(), 999);
		});

		it("fails fast when attempting to advance the system clock", async () => {
			const clock = Clock.create();
			await assert.throwsAsync(
				() => clock.advanceNullAsync(10),
				"Can't advance the clock because it isn't a null clock"
			);
			await assert.throwsAsync(
				() => clock.advanceNullTimersAsync(),
				"Can't advance the clock because it isn't a null clock"
			);
		});

		it("can wait", async () => {
			const clock = Clock.createNull();
			let wait = "waiting";

			clock.waitAsync(10).then(() => {
				wait = clock.now();
			});
			assert.equal(wait, "waiting");
			await clock.advanceNullAsync(20);
			assert.equal(wait, 10);
		});

		it("can timeout", async () => {
			const clock = Clock.createNull();
			await clock.timeoutAsync(10, Promise.resolve(), () => {});
		});

	});

});