// Copyright Titanium I.T. LLC.
import * as ensure from "util/ensure.mjs";
import { OutputTracker } from "util/output_tracker.mjs";
import EventEmitter from "events";
import { CommandLine } from "infrastructure/command_line.mjs";
import { Clock } from "infrastructure/clock.mjs";

const OUTPUT_EVENT = "output";

/** Logging infrastructure */
export class Log {

	static create() {
		ensure.signature(arguments, []);
		return new Log(CommandLine.create(), Clock.create());
	}

	static createNull() {
		ensure.signature(arguments, []);
		return new Log(CommandLine.createNull(), Clock.createNull());
	}

	static get DEBUG() { return "debug"; }

	static get INFO() { return "info"; }

	static get MONITOR() { return "monitor"; }

	static get ACTION() { return "action"; }

	static get EMERGENCY() { return "emergency"; }

	constructor(commandLine, clock, defaults = {}) {
		ensure.signature(arguments, [ CommandLine, Clock, [ undefined, Object ] ]);

		this._commandLine = commandLine;
		this._clock = clock;
		this._emitter = new EventEmitter();
		this._defaults = defaults;
	}

	get defaults() {
		return this._defaults;
	}

	debug(data) { this.#log(Log.DEBUG, data); }
	info(data) { this.#log(Log.INFO, data); }
	monitor(data) { this.#log(Log.MONITOR, data); }
	action(data) { this.#log(Log.ACTION, data); }
	emergency(data) { this.#log(Log.EMERGENCY, data); }

	bind(defaults) {
		ensure.signature(arguments, [ Object ]);

		const newLog = new Log(this._commandLine, this._clock, { ...this._defaults, ...defaults });
		newLog._emitter = this._emitter;
		return newLog;
	}

	trackOutput() {
		ensure.signature(arguments, []);

		return new OutputTracker(this._emitter, OUTPUT_EVENT);
	}

	#log(alert, data) {
		ensure.signature(arguments, [ String, Object ], [ "alert", "data" ]);

		data = { alert, ...this._defaults, ...data };
		const { dataToLog, dataToTrack } = normalizeErrors(data);

		this._commandLine.writeStdout(`${(currentFormattedTime(this._clock))} ${JSON.stringify(dataToLog)}\n`);
		this._emitter.emit(OUTPUT_EVENT, dataToTrack);
	}

}

function normalizeErrors(data) {
	const dataToLog = {};
	const dataToTrack = {};

	Object.entries(data).forEach(([ name, value ]) => {
		let logValue = value;
		let trackValue = value;
		if (value instanceof Error) {
			logValue = value.stack;
			trackValue = `${value.name}: ${value.message}`;
		}
		dataToLog[name] = logValue;
		dataToTrack[name] = trackValue;
	});

	return { dataToLog, dataToTrack };
}

function currentFormattedTime(clock) {
	const options = {
		dateStyle: "medium",
		timeStyle: "long",
		timeZone: "UTC",
		hourCycle: "h23",
	};
	return clock.toFormattedString(options, "en-US");
}
