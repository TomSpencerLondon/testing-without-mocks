// Copyright Titanium I.T. LLC.
import * as ensure from "util/ensure.mjs";

/** Encapsulates an HTTP response for the server to serve */
export class HttpResponse {

	// convenience method that creates a response with overrideable defaults
	static createForTestingOnly(options = {}) {
		ensure.signature(arguments, [[ undefined, {
			status: [ undefined, Number ],
			headers: [ undefined, Object ],
			body: [ undefined, String ],
			contentType: [ undefined, String ],
			debug: [ undefined, Object, String ],
		}]]);
		const DEFAULTS = {
			status: 200,
			body: "default test body"
		};

		options = { ...DEFAULTS, ...options };
		return new HttpResponse(options, options.contentType);
	}

	static create(options) {
		ensure.signature(arguments, [{
			status: Number,
			headers: [ undefined, Object ],
			body: String,
			contentType: [ undefined, String ],
			debug: [ undefined, Object, String ],
		}]);

		const { contentType, ...remainingOptions } = options;

		return new HttpResponse(remainingOptions, contentType);
	}

	static createPlainTextResponse(options) {
		ensure.signature(arguments, [{
			status: Number,
			headers: [ undefined, Object ],
			body: String,
			debug: [ undefined, Object, String ],
		}]);

		return new HttpResponse(options, "text/plain; charset=utf-8");
	}

	static createHtmlResponse(options) {
		ensure.signature(arguments, [{
			status: Number,
			headers: [ undefined, Object ],
			body: String,
			debug: [ undefined, Object, String ],
		}]);

		return new HttpResponse(options, "text/html; charset=utf-8");
	}

	static createJsonResponse(options) {
		ensure.signature(arguments, [{
			status: Number,
			headers: [ undefined, Object ],
			body: Object,
			debug: [ undefined, Object, String ],
		}]);

		options = { ...options, body: JSON.stringify(options.body) };
		return new HttpResponse(options, "application/json");
	}

	constructor(options, contentType) {
		this._status = options.status;
		const contentTypeHeaders = contentType !== undefined ? { "content-type": contentType } : {};
		this._headers = { ...contentTypeHeaders, ...options.headers };
		this._body = options.body;

		// We provide this field so it can be viewed in failing tests. It's not used in any way.
		if (options.debug instanceof Error) this._debug = options.debug.stack;
		else if (options.debug !== undefined) this._debug = options.debug;
	}

	get status() {
		return this._status;
	}

	get headers() {
		return this._headers;
	}

	get body() {
		return this._body;
	}

}