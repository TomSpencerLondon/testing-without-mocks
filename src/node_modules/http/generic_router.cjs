// Copyright Titanium I.T. LLC.
"use strict";

const ensure = require("util/ensure");
const HttpRequest = require("http/http_request.cjs");
const OutputTracker = require("util/output_tracker");
const EventEmitter = require("node:events");
const Log = require("infrastructure/log");

const REQUEST_EVENT = "request";

/** A general-purpose router than can be configured to convert URL paths to method calls */
module.exports = class GenericRouter {

	static create(errorFnAsync, routes) {
		ensure.signature(arguments, [ Function, Object ]);

		return new GenericRouter(errorFnAsync, routes);
	}

	constructor(errorFnAsync, routes) {
		ensure.signature(arguments, [ Function, Object ]);

		this._errorFnAsync = errorFnAsync;
		this._routes = routes;
		this._emitter = new EventEmitter();
	}

	async routeAsync(request, log, context) {
		ensure.signature(arguments, [ HttpRequest, Log, [ undefined, Object ]]);

		const method = request.method.toLowerCase();
		const path = request.urlPathname;

		this.#recordRequest(method, path, log, context);
		return await this.#callRouteHandlerAsync(method, path, request, context);
	}

	trackRequests() {
		return OutputTracker.create(this._emitter, REQUEST_EVENT);
	}

	#recordRequest(method, path, log, context) {
		this._emitter.emit(REQUEST_EVENT, { method, path, context });
		log.info({ message: "request", method, path });
	}

	async #callRouteHandlerAsync(method, path, request, context) {
		const route = this._routes[path];
		if (route === undefined) return await this._errorFnAsync(404, "not found", request);

		const functionName = `${method}Async`;
		const methodFnAsync = route[functionName];
		if (methodFnAsync === undefined) return await this._errorFnAsync(405, "method not allowed", request);

		return await methodFnAsync.call(route, request, context);
	}

};