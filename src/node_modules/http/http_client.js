// Copyright Titanium I.T. LLC.
"use strict";

const ensure = require("util/ensure");
const http = require("http");
const EventEmitter = require("events");
const OutputTracker = require("util/output_tracker");

const REQUEST_EVENT = "request";
const DEFAULT_NULLED_RESPONSE = {
	status: 503,
	headers: { NulledHttpClient: "default header" },
	body: "Nulled HttpClient default body",
	hang: false,
};

/** Generic HTTP client */
module.exports = class HttpClient {

	static create() {
		ensure.signature(arguments, []);
		return new HttpClient(http);
	}

	static createNull(responses) {
		return new HttpClient(new NullHttp(responses));
	}

	constructor(http) {
		this._http = http;
		this._emitter = new EventEmitter();
	}

	trackRequests() {
		ensure.signature(arguments, []);
		return new OutputTracker(this._emitter, REQUEST_EVENT);
	}

	request({ host, port, method, path, headers = {}, body = "" }) {
		ensure.signature(arguments, [{
			host: String,
			port: Number,
			method: String,
			path: String,
			headers: [ undefined, Object ],
			body: [ undefined, String ],
		}]);
		const requestOptions = {
			host,
			port,
			method: method.toLowerCase(),
			path,
			headers: normalizeHeaders(headers),
			body
		};
		if (requestOptions.method === "get" && requestOptions.body !== "") {
			throw new Error("Don't include body with GET requests; Node won't send it");
		}

		const requestStatus = { inProgress: true };

		const request = this.#sendRequest(requestOptions);
		const cancelFn = this.#createCancelFn(request, requestStatus, requestOptions);

		const responsePromise = new Promise((resolve, reject) => {
			this.#handleResponse(request, requestStatus, resolve);
			this.#handleError(request, reject);
		});

		return { responsePromise, cancelFn };
	}

	#sendRequest(requestOptions) {
		const { body, ...httpOptions } = requestOptions;

		const request = this._http.request(httpOptions);
		request.end(body);
		this._emitter.emit(REQUEST_EVENT, requestOptions);
		return request;
	}

	#createCancelFn(request, requestStatus, requestOptions) {
		return (message) => {
			if (!requestStatus.inProgress) return false;

			request.destroy(new Error(message));
			this._emitter.emit(REQUEST_EVENT, { ...requestOptions, cancelled: true });
			requestStatus.inProgress = false;
			return true;
		};
	}

	#handleResponse(request, requestStatus, resolve) {
		request.once("response", (response) => {
			const headers = { ...response.headers };
			delete headers.connection;
			delete headers["content-length"];
			delete headers.date;

			let body = "";
			response.on("data", (chunk) => {
				body += chunk;
			});
			response.on("end", () => {
				requestStatus.inProgress = false;
				resolve({
					status: response.statusCode,
					headers,
					body,
				});
			});

		});
	}

	#handleError(request, reject) {
		request.once("error", reject);
	}

};

function normalizeHeaders(headers) {
	const normalized = Object.entries(headers).map(([ key, value ]) => [ key.toLowerCase(), value ]);
	return Object.fromEntries(normalized);
}


class NullHttp {

	constructor(responses = {}) {
		ensure.signature(responses, [ [ undefined, Object ] ]);

		this._responses = responses;
	}

	request({ path }) {
		return new NullRequest(this._responses[path]);
	}

}

class NullRequest extends EventEmitter {

	constructor(endpointResponses = DEFAULT_NULLED_RESPONSE) {
		super();
		ensure.signature(arguments, [[ undefined, Object, Array ]], [ "endpointResponses" ]);

		this._endpointResponses = endpointResponses;
	}

	end() {
		setImmediate(() => {
			const response = this.#nextResponse();

			if (response === undefined) this.emit("error", new Error("Out of configured responses"));
			else this.emit("response", new NullResponse(response));
		});
	}

	destroy(error) {
		setImmediate(() => {
			this.emit("error", error);
		});
	}

	#nextResponse() {
		if (!Array.isArray(this._endpointResponses)) return this._endpointResponses;
		else return this._endpointResponses.shift();
	}

}

class NullResponse extends EventEmitter {

	constructor({ status = 501, headers = {}, body = "", hang = false }) {
		super();
		ensure.signature(arguments, [{
			status: [ undefined, Number ],
			headers: [ undefined, Object ],
			body: [ undefined, String ],
			hang: [ undefined, Boolean ],
		}], [ "response" ]);

		this._status = status;
		this._headers = normalizeHeaders(headers);

		setImmediate(() => {
			this.emit("data", body);
			if (!hang) this.emit("end");
		});
	}

	get statusCode() {
		return this._status;
	}

	get headers() {
		return this._headers;
	}

}