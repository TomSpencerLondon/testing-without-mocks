// Copyright Titanium I.T. LLC.
import ensure from "util/ensure.cjs";
import type from "util/type.cjs";
import http from "http";
import EventEmitter from "events";
import { HttpRequest } from "http/http_request.mjs";
import HttpResponse from "http/http_response.cjs";
import Log from "infrastructure/log.cjs";

const ROUTER_TYPE = {
	routeAsync: Function,
};

/** Wrapper for HTTP server */
export class HttpServer {

	static create() {
		ensure.signature(arguments, []);

		return new HttpServer(http);
	}

	static createNull() {
		ensure.signature(arguments, []);

		return new HttpServer(stubbedHttp);
	}

	constructor(http) {
		ensure.signature(arguments, [ Object ]);

		this._http = http;
		this._started = false;
		this._nodeServer = http.createServer();
	}

	get isStarted() {
		return this._started;
	}

	get port() {
		return this.isStarted ? this._port : null;
	}

	async startAsync(port, log, router) {
		ensure.signatureMinimum(arguments, [ Number, Log, ROUTER_TYPE ]);
		this.#ensureStopped("Can't start server because it's already running");

		this._port = port;
		this._log = log;
		this._router = router;

		this._started = true;   // located before promise to avoid potential race condition
		await new Promise((resolve, reject) => {
			this._nodeServer.on("listening", () => this.#onStartup(resolve));
			this._nodeServer.on("error", (err) => this.#onStartupError(err, reject));
			this._nodeServer.on("request", (request, response) => this.#onRequestAsync(request, response));

			this._nodeServer.listen(this._port);
		});
	}

	async stopAsync() {
		ensure.signature(arguments, []);
		this.#ensureStarted("Can't stop server because it isn't running");

		await new Promise((resolve, reject) => {
			this._nodeServer.on("close", resolve);
			this._nodeServer.close();
		});
		this._started = false;
	}

	async simulateRequestAsync(httpRequest = HttpRequest.createNull()) {
		ensure.signature(arguments, [[ undefined, HttpRequest ]]);
		this.#ensureStarted("Can't simulate request because server isn't running");

		return await this.#handleRequestAsync(httpRequest);
	}

	#onStartup(resolve) {
		this._log.info({
			message: "server started",
			port: this._port,
		});
		resolve();
	}

	#onStartupError(err, reject) {
		reject(new Error(`Couldn't start server due to error: ${err.message}`));
	}

	async #onRequestAsync(nodeRequest, nodeResponse) {
		const httpRequest = HttpRequest.create(nodeRequest);
		const httpResponse = await this.#handleRequestAsync(httpRequest);
		sendResponse(httpResponse, nodeResponse);
	}

	async #handleRequestAsync(httpRequest) {
		try {
			const response = await this._router.routeAsync(httpRequest);
			const typeError = type.check(response, HttpResponse);
			if (typeError !== null) {
				return internalServerError(this._log, response, "request handler returned invalid response");
			}
			else {
				return response;
			}
		}
		catch (err) {
			return internalServerError(this._log, err, "request handler threw exception");
		}
	}

	#ensureStarted(message) {
		if (!this.isStarted) throw new Error(message);
	}

	#ensureStopped(message) {
		if (this.isStarted) throw new Error(message);
	}

}

function sendResponse(httpResponse, nodeResponse) {
	nodeResponse.statusCode = httpResponse.status;
	setHeaders(nodeResponse, httpResponse.headers);
	nodeResponse.end(httpResponse.body);
}

function setHeaders(nodeResponse, headers) {
	Object.entries(headers).forEach(([ name, value ]) => {
		nodeResponse.setHeader(name, value);
	});
}

function internalServerError(log, details, message) {
	log.emergency({ message, details });
	return HttpResponse.createPlainTextResponse({
		status: 500,
		body: "Internal Server Error",
		debug: {
			message,
			details: details instanceof Error ? details.stack : details,
		},
	});
}


/** Embedded Stub **/

const stubbedHttp = {
	createServer() {
		return new StubbedNodeServer();
	}
};

class StubbedNodeServer extends EventEmitter {
	listen() {
		setImmediate(() => this.emit("listening"));
	}
	close() {
		setImmediate(() => this.emit("close"));
	}
}