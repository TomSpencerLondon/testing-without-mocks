// Copyright Titanium I.T. LLC.
"use strict";

const assert = require("util/assert");
const HttpResponse = require("./http_response");

describe("HttpResponse", () => {

	describe("generic factory", () => {

		it("has status code, headers, body, content type, and debug field", () => {
			const response = HttpResponse.create({
				status: 999,
				headers: { "my-header": "my-value" },
				body: "my body",
				contentType: "my-content-type",
				debug: "my debug field",
			});

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, "my body", "body");
			assert.deepEqual(response.headers, {
				"my-header": "my-value",
				"content-type": "my-content-type",
			}, "headers");

			// debug field is purely for convenience of troubleshooting failed tests--it's not accessible,
			// but it shows up in assertions and console logs.
			assert.equal(response._debug, "my debug field", "debug field");
		});

		it("headers, contentType, and debug field are optional", () => {
			assertResponseEquals(HttpResponse.create({
				status: 999,
				body: "my body",
			}), {
				status: 999,
				body: "my body",
			});
		});

		it("it converts errors in debug field to stack traces (for ease of debugging)", () => {
			const response = HttpResponse.create({
				status: 999,
				body: "irrelevant body",
				debug: new Error("my error"),
			});

			assert.match(response._debug, /^Error: my error\n    at/);
		});

		it("doesn't change response headers when original header object changes", () => {
			const headers = { "my-header": "my-value" };
			const response = HttpResponse.create({
				status: 999,
				body: "irrelevant body",
				headers,
			});

			headers["new-header"] = "should not appear in response";
			assert.deepEqual(response.headers, { "my-header": "my-value" });
		});

		it("headers' content-type field takes precedence over contentType option", () => {
			const response = HttpResponse.create({
				status: 999,
				headers: { "content-type": "overridden" },
				body: "irrelevant-body",
				contentType: "my content type",
			});

			assert.deepEqual(response.headers, { "content-type": "overridden" });
		});

	});


	describe("content-type factories", () => {

		it("plain text", () => {
			assertResponseEquals(HttpResponse.createPlainTextResponse({
				status: 999,
				headers: { "my-header": "my-value" },
				body: "my body",
				debug: "my debug",
			}), {
				status: 999,
				headers: {
					"content-type": "text/plain; charset=utf-8",
					"my-header": "my-value",
				},
				body: "my body",
				debug: "my debug",
			});
		});

		it("HTML", () => {
			assertResponseEquals(HttpResponse.createHtmlResponse({
				status: 999,
				headers: { "my-header": "my-value" },
				body: "my body",
				debug: "my debug",
			}), {
				status: 999,
				headers: {
					"content-type": "text/html; charset=utf-8",
					"my-header": "my-value",
				},
				body: "my body",
				debug: "my debug",
			});
		});

		it("JSON", () => {
			assertResponseEquals(HttpResponse.createJsonResponse({
				status: 999,
				headers: { "my-header": "my-value" },
				body: { "my-json": "my-body" },
				debug: "my debug",
			}), {
				status: 999,
				headers: {
					"content-type": "application/json",
					"my-header": "my-value",
				},
				body: JSON.stringify({ "my-json": "my-body" }),
				debug: "my debug",
			});
		});

	});

});


function assertResponseEquals(actual, expectedOptions) {
	const expected = new HttpResponse(expectedOptions);
	assert.deepEqual(actual, expected);
}
