// Copyright Titanium I.T. LLC. See LICENSE.txt for details.
const type = require("util/type.cjs");

exports.that = function(variable, message) {
	if (message === undefined) message = "Expected condition to be true";

	if (variable === false) throw new EnsureError(message, exports.that);
	if (variable !== true) throw new EnsureError("Expected condition to be true or false", exports.that);
};

exports.unreachable = function(message) {
	if (!message) message = "Unreachable code executed";

	throw new EnsureError(message, exports.unreachable);
};

exports.defined = function(variable, variableName) {
	if (variable === undefined) {
		throw new EnsureError(`${normalize(variableName)} was not defined`, exports.defined);
	}
};

exports.signature = function(args, signature, names) {
	checkSignature(false, args, signature, names, exports.signature);
};

exports.signatureMinimum = function(args, signature, names) {
	checkSignature(true, args, signature, names);
};

exports.type = function(variable, expectedType, name) {
	checkType(variable, expectedType, false, name, exports.type);
};

exports.typeMinimum = function(variable, expectedType, name) {
	checkType(variable, expectedType, true, name, exports.typeMinimum);
};

function checkSignature(allowExtra, args, signature = [], names = [], fnToRemoveFromStackTrace) {
	exports.that(Array.isArray(signature), "ensure.signature(): signature parameter must be an array");
	exports.that(Array.isArray(names), "ensure.signature(): names parameter must be an array");

	const expectedArgCount = signature.length;
	const actualArgCount = args.length;

	if (!allowExtra && (actualArgCount > expectedArgCount)) {
		throw new EnsureError(
			`Function called with too many arguments: expected ${expectedArgCount} but got ${actualArgCount}`,
			fnToRemoveFromStackTrace,
		);
	}

	signature.forEach(function(expectedType, i) {
		const name = names[i] ? names[i] : `Argument #${(i + 1)}`;
		checkType(args[i], expectedType, allowExtra, name, fnToRemoveFromStackTrace);
	});
}

function checkType(variable, expectedType, allowExtraKeys, name, fnToRemoveFromStackTrace) {
	const error = type.check(variable, expectedType, { name: normalize(name), allowExtraKeys });
	if (error !== null) throw new EnsureError(error, fnToRemoveFromStackTrace);
}

function normalize(variableName) {
	return variableName ? variableName : "variable";
}


class EnsureError extends Error {

	constructor(message, fnToRemoveFromStackTrace) {
		super(message);
		Error.captureStackTrace(this, fnToRemoveFromStackTrace);
	}

}