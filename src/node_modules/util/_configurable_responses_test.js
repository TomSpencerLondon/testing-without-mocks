// Copyright Titanium I.T. LLC.
"use strict";

const ensure = require("util/ensure");
const type = require("util/type");
const assert = require("util/assert");
const ConfigurableResponses = require("./configurable_responses");

describe("ConfigurableResponses", () => {

	describe("object factory", () => {

		it("converts object into configured responses", () => {
			const responses = ConfigurableResponses.fromObject({
				a: 1,
				b: 2,
			}, "my_name");

			assert.deepEqual(responses, {
				a: ConfigurableResponses.create(1, "my_name: a"),
				b: ConfigurableResponses.create(2, "my_name: b"),
			});
		});

		it("doesn't add name if it isn't provided", () => {
			const responses = ConfigurableResponses.fromObject({
				a: 1,
				b: 2,
			});

			assert.deepEqual(responses, {
				a: ConfigurableResponses.create(1),
				b: ConfigurableResponses.create(2),
			});
		});

	});


	describe("single response", () => {

		it("provides the same response forever", () => {
			const { responses } = createResponses({
				configured: 7,
			});

			assert.equal(responses.next(), 7);
			assert.equal(responses.next(), 7);
			assert.equal(responses.next(), 7);
		});

	});


	describe("list of responses", () => {

		it("provides each response in the list", () => {
			const { responses } = createResponses({
				configured: [ 1, 2, 3 ],
			});

			assert.equal(responses.next(), 1);
			assert.equal(responses.next(), 2);
			assert.equal(responses.next(), 3);
		});

		it("doesn't mutate original list", () => {
			const originalList = [ 1, 2, 3 ];
			const { responses } = createResponses({ configured: originalList });

			responses.next();
			assert.deepEqual(originalList, [ 1, 2, 3 ]);
		});

		it("throws error when list runs out", () => {
			const { responses } = createResponses({
				configured: [],
				name: "my_name",
			});

			assert.throws(
				() => responses.next(),
				"No more responses configured in my_name",
			);
		});

		it("doesn't include name if it isn't defined", () => {
			const { responses } = createResponses({
				configured: [],
			});

			assert.throws(
				() => responses.next(),
				"No more responses configured",
			);
		});

	});

});

function createResponses({
	configured = [],
	name = undefined,
} = {}) {
	ensure.signature(arguments, [[ undefined, {
		configured: [ undefined, ...type.ANY_VALID ],
		name: [ undefined, String ],
	}]]);

	return {
		responses: new ConfigurableResponses(configured, name),
	};
}