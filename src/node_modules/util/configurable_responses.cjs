// Copyright Titanium I.T. LLC.
const ensure = require("util/ensure");
const type = require("util/type");

module.exports = class ConfigurableResponses {

	static create(responses, name) {
		ensure.signature(arguments, [ type.ANY_VALID, [ undefined, String ]]);

		return new ConfigurableResponses(responses, name);
	}

	static mapObject(responseObject, name) {
		ensure.signature(arguments, [ Object, [ undefined, String ]]);

		const entries = Object.entries(responseObject);
		const translatedEntries = entries.map(([ key, value ]) => {
			const translatedName = name === undefined ? undefined : `${name}: ${key}`;
			return [ key, ConfigurableResponses.create(value, translatedName )];
		});
		return Object.fromEntries(translatedEntries);
	}

	constructor(responses, name) {
		ensure.signature(arguments, [ type.ANY_VALID, [ undefined, String ]]);

		this._description = name === undefined ? "" : ` in ${name}` ;
		this._responses = Array.isArray(responses)
			? [ ...responses ]
			: responses;
	}

	next() {
		ensure.signature(arguments, []);

		const response = Array.isArray(this._responses)
			? this._responses.shift()
			: this._responses;
		if (response === undefined) throw new Error(`No more responses configured${this._description}`);

		return response;
	}

};