// Copyright Titanium I.T. LLC.
import * as ensure from "util/ensure.js";
import * as types from "util/type.js";
import EventEmitter from "node:events";

const EVENT = "event";

/**
 * A helper class for implementing the Output Tracker pattern.
 * https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking
 */
export class OutputListener {

	/**
	 * Factory method. Creates an object that listens for events and provides the ability
	 * to track those events.
	 * @returns {OutputListener} the listener
	 */
	static create() {
		ensure.signature(arguments, []);

		return new OutputListener();
	}

	/** @deprecated Use the factory method instead. */
	constructor() {
		this._emitter = new EventEmitter();
	}

	/**
	 * Create an OutputTracker that records any future events emitted to this listener. Each
	 * OutputTracker is independent.
	 * @returns {OutputTracker} the output tracker
	 */
	trackOutput() {
		ensure.signature(arguments, []);

		return new OutputTracker(this._emitter, EVENT);
	}

	/**
	 * Emit an event. The event will be tracked by any active OutputTrackers. Does nothing if no
	 * OutputTrackers have been created.
	 * @param data
	 */
	emit(data) {
		ensure.signature(arguments, [ types.ANY ]);

		this._emitter.emit(EVENT, data);
	}

}


/** Tracks output. See https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#output-tracking */
class OutputTracker {

	/** @deprecated Use OutputListener.trackOutput() instead. */
	constructor(emitter, event) {
		this._emitter = emitter;
		this._event = event;
		this._data = [];

		this._trackerFn = (text) => this._data.push(text);
		this._emitter.on(this._event, this._trackerFn);
	}

	/**
	 * @returns {[]} all output that has been tracked so far
	 */
	get data() {
		return this._data;
	}

	/**
	 * Clear previously tracked data and start over.
	 * @returns {[]} all output that was tracked prior to being cleared
	 */
	clear() {
		ensure.signature(arguments, []);

		const result = [ ...this._data ];
		this._data.length = 0;
		return result;
	}

	/**
	 * Stop tracking.
	 */
	stop() {
		ensure.signature(arguments, []);

		this._emitter.off(this._event, this._trackerFn);
	}

}